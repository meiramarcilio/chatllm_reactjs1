{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\projects\\\\llm\\\\chatllm_reactjs1\\\\client\\\\src\\\\Summarizer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as cheerio from \"cheerio\";\n\n// async function getTextFromPage(url) {\n//     console.log(`Em getTextFromPage(), url = ${url}`);\n//     const res = await fetch(url);\n//     const html = await res.text();\n//     const $ = cheerio.load(html);\n//     return $(\"body\").text();\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getTextFromPage(webPageURL) {\n  try {\n    const res = await fetch('http://localhost:5000/api/gettextfrompage', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url: webPageURL\n      })\n    });\n    // Get API response:\n    const data = await res.json();\n    console.log('function getTextFromPage chamou API node.Js');\n    console.log(`data: ${data.content}`);\n    return data.response;\n  } catch (error) {\n    console.error('Error calling Back-end:', error);\n  }\n}\nasync function insertEntry(text, [entries, setEntries]) {\n  // Display user typed message:\n  setEntries(prev => [...prev, [text, 'userMsg']]);\n  try {\n    const pageText = getTextFromPage(text);\n    const prompt = [{\n      role: 'system',\n      content: ''\n    }, {\n      role: 'user',\n      content: pageText\n    }];\n    const res = await fetch('http://localhost:5000/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: prompt\n      })\n    });\n    console.log(res);\n    const data = await res.json();\n    // Retrieve AI message sent back:\n    //const response = data.choices[0].message.content; // for ChatGPT using OpenAI\n    const response = data.response; //just for ollama\n    // console.log(response); // Print message on console\n    // Print on UI client:\n    setEntries(prev => [...prev, [response, 'AIMsg']]);\n  } catch (error) {\n    console.error('Error calling Back-end:', error);\n  } finally {\n    // nothing\n  }\n}\nfunction Chat() {\n  _s();\n  const [entries, setEntries] = useState([]);\n  const handleNewEntry = async text => {\n    if (text.trim() !== '') {\n      insertEntry(text, [entries, setEntries]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Chat-main\",\n      children: /*#__PURE__*/_jsxDEV(Main, {\n        entries: entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"Chat-footer\",\n      children: /*#__PURE__*/_jsxDEV(Footer, {\n        onSubmit: handleNewEntry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n}\n_s(Chat, \"QwXuxOBCVNdGQT4jCo9qBV+7uvY=\");\n_c = Chat;\nfunction Main({\n  entries\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"messages\",\n    children: entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      class: entry[1],\n      children: entry[0]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Main;\nfunction Footer({\n  onSubmit\n}) {\n  _s2();\n  const txtUserMessage = useRef(null);\n  const [text, setText] = useState('');\n  useEffect(() => {\n    var _txtUserMessage$curre;\n    (_txtUserMessage$curre = txtUserMessage.current) === null || _txtUserMessage$curre === void 0 ? void 0 : _txtUserMessage$curre.focus(); // Focus the input when component mounts\n  }, []);\n  const handleKeyDown = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      var _txtUserMessage$curre2;\n      event.preventDefault(); // Prevent newline\n      //console.log('Typed text: ' + text);\n      onSubmit(text, 'userMsg'); // Call\n      setText(''); // Clear textarea content\n      (_txtUserMessage$curre2 = txtUserMessage.current) === null || _txtUserMessage$curre2 === void 0 ? void 0 : _txtUserMessage$curre2.focus(); // Focus the input again\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: txtUserMessage,\n      value: text,\n      onKeyDown: handleKeyDown,\n      onChange: e => setText(e.target.value),\n      maxLength: \"200px\",\n      placeholder: \"Type the website URL and press Enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s2(Footer, \"DGqRCHVEHXDkHpjcXdLP2F+FP64=\");\n_c3 = Footer;\nexport default Chat;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"Main\");\n$RefreshReg$(_c3, \"Footer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","cheerio","jsxDEV","_jsxDEV","getTextFromPage","webPageURL","res","fetch","method","headers","body","JSON","stringify","url","data","json","console","log","content","response","error","insertEntry","text","entries","setEntries","prev","pageText","prompt","role","message","Chat","_s","handleNewEntry","trim","className","children","Main","fileName","_jsxFileName","lineNumber","columnNumber","Footer","onSubmit","_c","class","map","entry","index","_c2","_s2","txtUserMessage","setText","_txtUserMessage$curre","current","focus","handleKeyDown","event","key","shiftKey","_txtUserMessage$curre2","preventDefault","type","ref","value","onKeyDown","onChange","e","target","maxLength","placeholder","_c3","$RefreshReg$"],"sources":["D:/OneDrive/projects/llm/chatllm_reactjs1/client/src/Summarizer.js"],"sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\r\nimport * as cheerio from \"cheerio\"\r\n\r\n// async function getTextFromPage(url) {\r\n//     console.log(`Em getTextFromPage(), url = ${url}`);\r\n//     const res = await fetch(url);\r\n//     const html = await res.text();\r\n//     const $ = cheerio.load(html);\r\n//     return $(\"body\").text();\r\n// }\r\n\r\nasync function getTextFromPage(webPageURL) {\r\n    try{\r\n        const res = await fetch('http://localhost:5000/api/gettextfrompage', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ url: webPageURL })\r\n        });\r\n        // Get API response:\r\n        const data = await res.json();\r\n\r\n        console.log('function getTextFromPage chamou API node.Js');\r\n        console.log(`data: ${data.content}`);\r\n        return data.response;\r\n    } catch (error) {\r\n        console.error('Error calling Back-end:', error);\r\n    }\r\n}\r\n\r\nasync function insertEntry(text, [entries, setEntries]){\r\n    // Display user typed message:\r\n    setEntries((prev) => [...prev, [text, 'userMsg']]);\r\n    try {\r\n        const pageText = getTextFromPage(text);\r\n\r\n        const prompt = [\r\n            { role: 'system', content: '' },\r\n            { role: 'user', content: pageText}\r\n        ]\r\n\r\n        const res = await fetch('http://localhost:5000/api/chat', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ message: prompt })\r\n        });\r\n\r\n        console.log(res);\r\n\r\n        const data = await res.json();\r\n        // Retrieve AI message sent back:\r\n        //const response = data.choices[0].message.content; // for ChatGPT using OpenAI\r\n        const response = data.response; //just for ollama\r\n        // console.log(response); // Print message on console\r\n        // Print on UI client:\r\n        setEntries((prev) => [...prev, [response, 'AIMsg']]);\r\n    } catch (error) {\r\n        console.error('Error calling Back-end:', error);\r\n    }\r\n    finally{\r\n        // nothing\r\n    }\r\n}\r\n\r\nfunction Chat() {\r\n  const [entries, setEntries] = useState([]);\r\n \r\n  const handleNewEntry = async (text) => {\r\n    if (text.trim() !== '') {\r\n      insertEntry(text, [entries, setEntries]);\r\n    }\r\n  };\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <main className=\"Chat-main\">\r\n          <Main entries={entries} />\r\n        </main>\r\n        <footer className=\"Chat-footer\">\r\n          <Footer onSubmit={handleNewEntry} />\r\n        </footer>\r\n      </div>\r\n  );\r\n}\r\n\r\nfunction Main({ entries }){\r\n  return (\r\n    <div class=\"messages\">\r\n      {\r\n        entries.map((entry, index) => (\r\n          <div key={index} class={entry[1]}>\r\n            {entry[0]}\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Footer({ onSubmit }){\r\n  const txtUserMessage = useRef(null);\r\n  const [text, setText] = useState('');\r\n\r\n  useEffect(() => {\r\n    txtUserMessage.current?.focus(); // Focus the input when component mounts\r\n  }, []);\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault(); // Prevent newline\r\n      //console.log('Typed text: ' + text);\r\n      onSubmit(text, 'userMsg'); // Call\r\n      setText(''); // Clear textarea content\r\n      txtUserMessage.current?.focus(); // Focus the input again\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n        <input\r\n            type=\"text\" \r\n            ref={txtUserMessage} \r\n            value={text}\r\n            onKeyDown={handleKeyDown}\r\n            onChange={(e) => setText(e.target.value)}\r\n            maxLength=\"200px\"\r\n            placeholder=\"Type the website URL and press Enter\"\r\n        />\r\n    </div>\r\n  );\r\n}\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}